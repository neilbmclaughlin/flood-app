name: Merge Release Branch and Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: version for release

jobs:
  merge_release_branch_and_create_release:
    runs-on: ubuntu-latest

    steps:

      - name: Display inputs
        run: echo "${{ github.event.inputs.version }}"

      - name: Check PAT token is still valid
        run: |
          gh workflow list --repo "$GITHUB_REPOSITORY_OWNER/flood-service"
        env:
          # if this fails the create/regenerate classic PAT and then populate it using `gh secret set GH_WORKFLOW`
          GH_TOKEN: ${{ secrets.GH_WORKFLOW }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: development
          fetch-depth: 0

      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        
      - name: Setup version env vars
        run: |
          version=${{ github.event.inputs.version }}
          echo VERSION=$version >> "$GITHUB_ENV"
          echo RELEASE_BRANCH="release/$version" >> "$GITHUB_ENV"
          echo TAG_VERSION="v$version" >> "$GITHUB_ENV"
          echo RELEASE_NOTES_FILE="./release-docs/CFF-${version}.md" >> "$GITHUB_ENV"

      - name: Check branch exists
        run: |
          if ! git ls-remote --exit-code origin "refs/heads/${RELEASE_BRANCH}"; then
            echo "Error: Branch ${RELEASE_BRANCH} does not exist." >&2
            exit 1
          fi

      - name: Merge release > master PR
        run: |
          master_pr=$(gh pr list --base "master" --head "${RELEASE_BRANCH}" --limit 1 --json number --state open --jq '.[] | .number')
          gh pr comment --body "Merged from merge.yml workflow" $master_pr
          gh pr merge --rebase $master_pr
        env:
          GH_TOKEN: ${{ secrets.GH_WORKFLOW }}

      - name: Merge release > development PR
        run: |
          development_pr=$(gh pr list --base "development" --head "${RELEASE_BRANCH}" --limit 1 --json number --state open --jq '.[] | .number')
          gh pr comment --body "Merged from merge.yml workflow" $development_pr
          gh pr merge --rebase --delete-branch $development_pr
        env:
          GH_TOKEN: ${{ secrets.GH_WORKFLOW }}

      - name: Create GitHub Release
        run: gh release create $TAG_VERSION --title "Release $VERSION" --notes "[release notes](/$RELEASE_NOTES_FILE)"
        env:
          GH_TOKEN: ${{ secrets.GH_WORKFLOW }}

      - name: Trigger Merge Release Branch for flood-service
        run: |
          echo "trigger commented out"
          # gh workflow run --repo  "$GITHUB_REPOSITORY_OWNER/flood-service" merge.yml -f version="$VERSION"
        env:
          # use PAT token with repo scope (github.token didn't work)
          GH_TOKEN: ${{ secrets.GH_WORKFLOW }}
